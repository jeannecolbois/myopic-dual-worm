
# coding: utf-8

# In[ ]:


import numpy as np
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')

import KagomeDrawing as kdraw
import GraphDrawing as gdw
import KagomeFunctions as kf
import DualwormFunctions as dw
import argparse


# In[ ]:


def getPositions(s_ijl,a = 2):
    pos = {} #empty dictionary
    for s, (i,j,l) in enumerate(s_ijl):
        x = a * (i + j / 2.0)
        y = a * j * np.sqrt(3) / 2.0
        if l == 0:
            x += a / 2.0
        if l == 1:
            x += a / 4.0
            y += a * np.sqrt(3) / 4.0
        if l == 2:
            x -= a / 4.0
            y += a * np.sqrt(3) / 4.0
        pos[s] = (x,y)
    return pos


# In[ ]:


def spinHamiltonian():
    return 0


# In[ ]:


def main(args):
    ## Initialisation
    L = args.L
    print('Lattice side size: ', L)

    (s_ijl, ijl_s) = kdraw.createspinsitetable(L)
    pos = getPositions(s_ijl, a = 2)

    plt.figure()
    plt.axis('equal')
    gdw.draw_nodes(pos, list(pos.keys()), c = "blue", s = 20)
    plt.tick_params(  
        which = 'both',      # both major and minor ticks are affected
        bottom = False,      # ticks along the bottom edge are off
        top = False,         # ticks along the top edge are off
        labelbottom = False,
        left = False,
        right = False,
        labelleft = False)

    plt.figure()
    plt.axis('equal')
    kdraw.plot_kag_nodes(L,2)
    plt.tick_params(  
        which = 'both',      # both major and minor ticks are affected
        bottom = False,      # ticks along the bottom edge are off
        top = False,         # ticks along the top edge are off
        labelbottom = False,
        left = False,
        right = False,
        labelleft = False)
    plt.show()

    [d_ijl, ijl_d, s_ijl, ijl_s, d_2s, s2_d, 
     d_nd, d_vd, d_wn, sidlist, didlist, c_ijl, ijl_c, c2s, csign] = dw.latticeinit(L)
    
    ## Hamiltonian
    J1 = args.J1
    J2 = args.J2
    J3 = args.J3
    J3st = J3
    J4 = args.J4
    h = args.h
    couplings = {'J1': J1, 'J2':J2, 'J3':J3, 'J3st':J3st, 'J4':J4}
    print("Couplings extracted: ", couplings)
    
    hamiltonian = dw.Hamiltonian(couplings,d_ijl, ijl_d, L)
    print("hamiltonian computed")
    
    spinstate = np.zeros(len(s_ijl),dtype='int8')
    return s_ijl, hamiltonian, spinstate


# In[ ]:


def genArgs():

    parser = argparse.ArgumentParser()

    parser.add_argument('--L', type = int, default = 4, help = 'Lattice side size')

    # COUPLINGS
    parser.add_argument('--J1', type = float, default = 1.0,
                        help = 'NN coupling') # nearest-neighbour coupling
    parser.add_argument('--J2', type = float, default = 0.0,
                        help = '2nd NN coupling') # 2nd NN coupling
    parser.add_argument('--J3', type = float, default = 0.0,
                        help = '3rd NN coupling') # 3rd NN coupling
    parser.add_argument('--J4', type = float, default = 0.0,
                        help = '4th NN coupling')
    parser.add_argument('--h', type = float, default = 0.0,
                        help = 'Magnetic field')
    
    
    args = parser.parse_args()
    return args


# In[ ]:


if __name__ == "__main__":
    

    ### PARSING
    parser = argparse.ArgumentParser()

    parser.add_argument('--L', type = int, default = 4, help = 'Lattice side size')

    # COUPLINGS
    parser.add_argument('--J1', type = float, default = 1.0,
                        help = 'NN coupling') # nearest-neighbour coupling
    parser.add_argument('--J2', type = float, default = 0.0,
                        help = '2nd NN coupling') # 2nd NN coupling
    parser.add_argument('--J3', type = float, default = 0.0,
                        help = '3rd NN coupling') # 3rd NN coupling
    parser.add_argument('--J4', type = float, default = 0.0,
                        help = '4th NN coupling')
    parser.add_argument('--h', type = float, default = 0.0,
                        help = 'Magnetic field')
    
    
    args = parser.parse_args()
    
    main(args)

